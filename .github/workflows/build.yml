name: Build and Package Mediatek Mali GPU Governor

# 缓存策略说明:
# 1. Rust工具链和组件缓存 - 跨job共享
# 2. Cargo依赖缓存 - 基于Cargo.lock哈希
# 3. NDK缓存 - 避免重复下载大文件
# 4. 系统依赖缓存 - 避免重复apt安装
# 5. 工具二进制缓存 - cargo-ndk, shfmt等

on:
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug, release, or both)'
        required: true
        default: 'both'
        type: choice
        options:
        - debug
        - release
        - both

env:
  CARGO_TERM_COLOR: always

jobs:
  format-and-check:
    name: Format and Lint Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: System diagnostics
      run: |
        echo "🔍 System Information:"
        echo "Disk space: $(df -h / | tail -1)"
        echo "Memory: $(free -h | grep Mem)"
        echo "Available space for /tmp: $(df -h /tmp | tail -1)"
        echo "Runner temp: $RUNNER_TEMP"
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust toolchain and tools
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup
          ~/.cargo/bin
        key: ${{ runner.os }}-rust-toolchain-${{ hashFiles('rust-toolchain.toml', 'Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-rust-toolchain-

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Cache shfmt binary
      uses: actions/cache@v4
      id: cache-shfmt
      with:
        path: ~/.local/bin/shfmt
        key: ${{ runner.os }}-shfmt-v3.7.0

    - name: Install shfmt
      if: steps.cache-shfmt.outputs.cache-hit != 'true'
      run: |
        # 使用更简单和可靠的方法安装 shfmt 到用户目录
        SHFMT_VERSION="v3.7.0"
        mkdir -p ~/.local/bin
        wget -O ~/.local/bin/shfmt "https://github.com/mvdan/sh/releases/download/${SHFMT_VERSION}/shfmt_${SHFMT_VERSION}_linux_amd64"
        chmod +x ~/.local/bin/shfmt
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Format shell scripts
      run: |
        find module -type f -name "*.sh" -exec shfmt -w -s {} \;
        
    - name: Format Python code
      run: |
        python -m pip install --upgrade pip black isort
        black --check build.py
        isort --check-only build.py
        
    - name: Format Rust code
      run: cargo fmt --check
      
    - name: Run clippy
      run: cargo clippy -- -D warnings

  version-sync:
    name: Version Synchronization Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Check version consistency
      run: |
        # Check if module.prop exists
        if [ ! -f "module/module.prop" ]; then
          echo "❌ module/module.prop not found!"
          echo "Available files in module directory:"
          ls -la module/ || echo "module directory not found"
          exit 1
        fi
        
        CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "//' | sed 's/"//')
        MODULE_VERSION=$(grep '^version=' module/module.prop | sed 's/version=v//')
        
        echo "📦 Cargo.toml version: $CARGO_VERSION"
        echo "📱 module.prop version: $MODULE_VERSION"
        
        if [ "$CARGO_VERSION" != "$MODULE_VERSION" ]; then
          echo ""
          echo "⚠️  Version mismatch detected!"
          echo "   Cargo.toml: $CARGO_VERSION"
          echo "   module.prop: v$MODULE_VERSION"
          echo ""
          echo "💡 To fix this, update module/module.prop:"
          echo "   version=v$CARGO_VERSION"
          echo ""
          echo "🔧 Or run this command locally:"
          echo "   sed -i 's/version=v.*/version=v$CARGO_VERSION/' module/module.prop"
          exit 1
        else
          echo "✅ Versions are synchronized: v$CARGO_VERSION"
        fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.build_type != ''
    
    # 添加超时限制
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android

    - name: Cache Rust toolchain
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup
          ~/.cargo/bin
        key: ${{ runner.os }}-rust-toolchain-test-${{ hashFiles('rust-toolchain.toml', 'Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-rust-toolchain-
        
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r28b

    # 暂时禁用 NDK 缓存避免大小限制问题 - Test Job
    # - name: Cache NDK
    #   uses: actions/cache@v4
    #   with:
    #     path: ${{ steps.setup-ndk.outputs.ndk-path }}
    #     key: ${{ runner.os }}-ndk-r28b
    #     restore-keys: |
    #       ${{ runner.os }}-ndk-

    # 使用更高效的系统依赖缓存策略 - 仅缓存用户目录避免权限问题
    - name: Cache system packages (bindgen dependencies)
      uses: actions/cache@v4
      id: cache-system-deps
      with:
        path: |
          ~/.cache/bindgen-deps
        key: ${{ runner.os }}-bindgen-system-deps-v4-${{ hashFiles('.github/workflows/build.yml') }}
        restore-keys: |
          ${{ runner.os }}-bindgen-system-deps-v4-
          ${{ runner.os }}-bindgen-system-deps-
        
    - name: Install system dependencies for bindgen (optimized)
      if: steps.cache-system-deps.outputs.cache-hit != 'true'
      run: |
        echo "📦 Installing bindgen system dependencies..."
        
        # 预先下载package列表，避免重复update
        sudo apt-get update -qq
        
        # 使用最小化安装和指定版本避免依赖解析时间
        sudo apt-get install -y --no-install-recommends \
          clang-14 \
          libclang-14-dev \
          llvm-14-dev
        
        # 创建缓存标记和符号链接以提高兼容性
        mkdir -p ~/.cache/bindgen-deps
        echo "bindgen-deps-v4-$(date +%Y%m%d)" > ~/.cache/bindgen-deps/installed
        
        # 创建通用符号链接避免路径查找时间
        sudo ln -sf /usr/bin/clang-14 /usr/local/bin/clang
        sudo ln -sf /usr/lib/llvm-14/lib/libclang.so.1 /usr/local/lib/libclang.so
        
        # 验证安装，但减少输出
        echo "✅ Clang version: $(clang --version | head -1)"
        echo "✅ LibClang path: $(find /usr/lib/llvm-14 -name 'libclang.so*' | head -1)"
        
    - name: Setup libclang environment (optimized)
      run: |
        # 使用预设的libclang路径，避免动态查找
        echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV
        echo "CLANG_PATH=/usr/bin/clang-14" >> $GITHUB_ENV
        
        # 设置bindgen优化环境变量
        echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/lib/llvm-14/lib/clang/14.0.0/include" >> $GITHUB_ENV
        
        # 快速验证（仅在非缓存情况下）
        if [ "${{ steps.cache-system-deps.outputs.cache-hit }}" != "true" ]; then
          echo "🔍 Verifying libclang setup:"
          ls -la /usr/lib/llvm-14/lib/libclang.so* 2>/dev/null || echo "⚠️ Libclang not found in expected location"
        fi
        
    - name: Cache cargo-ndk for tests
      uses: actions/cache@v4
      id: cache-cargo-ndk-test
      with:
        path: ~/.cargo/bin/cargo-ndk
        key: ${{ runner.os }}-cargo-ndk-test-${{ hashFiles('Cargo.toml') }}
        
    - name: Install cargo-ndk for tests
      if: steps.cache-cargo-ndk-test.outputs.cache-hit != 'true'
      run: cargo install cargo-ndk

    - name: Cache cargo-ndk
      uses: actions/cache@v4
      id: cache-cargo-ndk
      with:
        path: ~/.cargo/bin/cargo-ndk
        key: ${{ runner.os }}-cargo-ndk-${{ hashFiles('Cargo.toml') }}
        
    - name: Install cargo-ndk
      if: steps.cache-cargo-ndk.outputs.cache-hit != 'true'
      run: cargo install cargo-ndk
        
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-test-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-test-cargo-deps-
          ${{ runner.os }}-cargo-deps-

    - name: Clean target directory (avoid cache size issues)
      run: |
        # Remove old target files to prevent cache bloat
        if [ -d "target" ]; then
          find target -name "*.rlib" -type f -delete 2>/dev/null || true
          find target -name "*.rmeta" -type f -delete 2>/dev/null || true
          find target -name "incremental" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "🧹 Cleaned target directory"
        fi
          
    - name: Run tests
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        LIBCLANG_PATH: /usr/lib/llvm-14/lib
        CLANG_PATH: /usr/bin/clang-14
        BINDGEN_EXTRA_CLANG_ARGS: "--target=aarch64-linux-android33 --sysroot=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android"
        CC_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang
        CXX_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang++
        AR_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
        RANLIB_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib
        CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang
        RUST_LOG: debug
      run: |
        # 精简的环境验证，仅在必要时输出
        if [ "${{ steps.cache-system-deps.outputs.cache-hit }}" != "true" ]; then
          echo "🔍 Environment verification:"
          echo "NDK Path: $ANDROID_NDK_HOME"
          echo "LibClang Path: $LIBCLANG_PATH" 
          echo "Clang Path: $CLANG_PATH"
          clang-14 --version | head -1
        fi
        
        # 验证NDK工具（仅第一次）
        if [ ! -f ~/.cache/ndk-verified ]; then
          echo "🛠️ NDK tools verification:"
          ls -la "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/" | grep aarch64 | head -2
          touch ~/.cache/ndk-verified
        fi
        
        # First, verify that the code compiles for Android target
        echo "🔧 Checking Android target compilation..."
        cargo ndk --target aarch64-linux-android --platform 33 check --verbose
        
        # Run unit tests (this project is a binary, so we test the binary)
        echo "🧪 Running unit tests..."
        cargo ndk --target aarch64-linux-android --platform 33 test --verbose --no-run
        
        echo "✅ Android target compilation and test compilation successful"

  build-debug:
    name: Build Module (debug)
    runs-on: ubuntu-latest
    needs: [format-and-check, version-sync, test]
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == ''

    # 添加超时限制，防止缓存问题导致的无限等待
    timeout-minutes: 45
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android

    - name: Cache Rust toolchain
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup
          ~/.cargo/bin
        key: ${{ runner.os }}-rust-toolchain-build-${{ hashFiles('rust-toolchain.toml', 'Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-rust-toolchain-

    - name: Cache cargo-ndk
      uses: actions/cache@v4
      id: cache-cargo-ndk-build
      with:
        path: ~/.cargo/bin/cargo-ndk
        key: ${{ runner.os }}-cargo-ndk-${{ hashFiles('Cargo.toml') }}
        
    - name: Install cargo-ndk
      if: steps.cache-cargo-ndk-build.outputs.cache-hit != 'true'
      run: cargo install cargo-ndk

    - name: Cache system packages for build (bindgen dependencies)
      uses: actions/cache@v4
      id: cache-system-deps-build
      with:
        path: |
          ~/.cache/bindgen-deps-build
        key: ${{ runner.os }}-bindgen-system-deps-build-v4-${{ hashFiles('.github/workflows/build.yml') }}
        restore-keys: |
          ${{ runner.os }}-bindgen-system-deps-v4-
          ${{ runner.os }}-bindgen-system-deps-build-
      
    - name: Install system dependencies for bindgen (build optimized)
      if: steps.cache-system-deps-build.outputs.cache-hit != 'true'
      run: |
        echo "📦 Installing bindgen dependencies for build job..."
        
        # 快速安装，复用test job的优化
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          clang-14 \
          libclang-14-dev \
          llvm-14-dev
        
        # 创建缓存标记和符号链接
        mkdir -p ~/.cache/bindgen-deps-build
        echo "bindgen-deps-build-v4-$(date +%Y%m%d)" > ~/.cache/bindgen-deps-build/installed
        
        # 创建符号链接避免路径查找
        sudo ln -sf /usr/bin/clang-14 /usr/local/bin/clang
        sudo ln -sf /usr/lib/llvm-14/lib/libclang.so.1 /usr/local/lib/libclang.so
        
        echo "✅ Build dependencies installed"

    - name: Setup libclang environment (build)
      run: |
        echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV
        echo "CLANG_PATH=/usr/bin/clang-14" >> $GITHUB_ENV
        echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/lib/llvm-14/lib/clang/14.0.0/include" >> $GITHUB_ENV
        
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r28b

    # NDK 缓存暂时禁用以避免 GitHub Actions 缓存大小限制
    # - name: Cache NDK
    #   uses: actions/cache@v4
    #   with:
    #     path: ${{ steps.setup-ndk.outputs.ndk-path }}
    #     key: ${{ runner.os }}-ndk-r28b
    #     restore-keys: |
    #       ${{ runner.os }}-ndk-

    - name: Cache cargo dependencies (debug)
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-build-debug-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-cargo-deps-
          ${{ runner.os }}-cargo-deps-

    - name: Clean target directory (avoid cache size issues)
      run: |
        # Remove old target files to prevent cache bloat
        if [ -d "target" ]; then
          find target -name "*.rlib" -type f -delete 2>/dev/null || true
          find target -name "*.rmeta" -type f -delete 2>/dev/null || true
          find target -name "incremental" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "🧹 Cleaned target directory"
        fi
          
    - name: Build debug version
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        LIBCLANG_PATH: /usr/lib/llvm-14/lib
        CLANG_PATH: /usr/bin/clang-14
        BINDGEN_EXTRA_CLANG_ARGS: "--target=aarch64-linux-android33 --sysroot=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android"
      run: |
        # 精简的环境验证，仅在非缓存情况下输出详细信息
        if [ "${{ steps.cache-system-deps-build.outputs.cache-hit }}" != "true" ]; then
          echo "🔍 Debug build environment verification:"
          echo "NDK Path: $ANDROID_NDK_HOME"
          echo "LibClang Path: $LIBCLANG_PATH"
          echo "Clang Path: $CLANG_PATH"
          clang-14 --version | head -1
        fi
        
        cargo ndk -t arm64-v8a build --target aarch64-linux-android
        
        # Verify build success
        if [ ! -f "target/aarch64-linux-android/debug/gpugovernor" ]; then
          echo "❌ Build failed - output binary not found"
          echo "📁 Checking target directory structure:"
          find target -name "gpugovernor" -type f 2>/dev/null || echo "No gpugovernor binary found anywhere"
          exit 1
        fi
        
        echo "✅ Debug build completed successfully"
        ls -la target/aarch64-linux-android/debug/gpugovernor
        
    - name: Package debug module
      run: |
        # Create output directory
        mkdir -p output/.temp
        
        # Copy module files
        cp -rf module/* output/.temp/
        
        # Verify the build output exists
        if [ ! -f "target/aarch64-linux-android/debug/gpugovernor" ]; then
          echo "❌ Build output not found: target/aarch64-linux-android/debug/gpugovernor"
          echo "📁 Available files in target/aarch64-linux-android/debug/:"
          ls -la target/aarch64-linux-android/debug/ || echo "Directory not found"
          exit 1
        fi
        
        # Copy the binary and overwrite the placeholder
        cp -f target/aarch64-linux-android/debug/gpugovernor output/.temp/bin/gpugovernor
        chmod +x output/.temp/bin/gpugovernor
        
        # Verify the final structure
        echo "📦 Debug module files prepared:"
        ls -la output/.temp/
        ls -la output/.temp/bin/
        echo "Binary size: $(stat -c%s output/.temp/bin/gpugovernor) bytes"
        
    - name: Debug artifact structure
      run: |
        echo "🔍 Verifying artifact structure before upload:"
        echo "Current directory: $(pwd)"
        echo "output/.temp exists: $(test -d output/.temp && echo 'YES' || echo 'NO')"
        if [ -d "output/.temp" ]; then
          echo "Contents of output/.temp:"
          find output/.temp -type f | head -20
          echo "Total files in output/.temp: $(find output/.temp -type f | wc -l)"
        else
          echo "❌ output/.temp directory not found!"
          echo "Available directories:"
          ls -la
        fi
        
    - name: Upload debug artifact
      uses: actions/upload-artifact@v4
      with:
        name: Mediatek_Mali_GPU_Governor-debug-${{ github.run_number }}
        path: output/.temp
        if-no-files-found: error
        retention-days: 30

  build-release:
    name: Build Module (release)
    runs-on: ubuntu-latest
    needs: [format-and-check, version-sync, test]
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == ''

    # 添加超时限制，防止缓存问题导致的无限等待
    timeout-minutes: 45
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android

    - name: Cache Rust toolchain
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup
          ~/.cargo/bin
        key: ${{ runner.os }}-rust-toolchain-build-${{ hashFiles('rust-toolchain.toml', 'Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-rust-toolchain-

    - name: Cache cargo-ndk
      uses: actions/cache@v4
      id: cache-cargo-ndk-build
      with:
        path: ~/.cargo/bin/cargo-ndk
        key: ${{ runner.os }}-cargo-ndk-${{ hashFiles('Cargo.toml') }}
        
    - name: Install cargo-ndk
      if: steps.cache-cargo-ndk-build.outputs.cache-hit != 'true'
      run: cargo install cargo-ndk

    - name: Cache system packages for build (bindgen dependencies)
      uses: actions/cache@v4
      id: cache-system-deps-build
      with:
        path: |
          ~/.cache/bindgen-deps-build
        key: ${{ runner.os }}-bindgen-system-deps-build-v4-${{ hashFiles('.github/workflows/build.yml') }}
        restore-keys: |
          ${{ runner.os }}-bindgen-system-deps-v4-
          ${{ runner.os }}-bindgen-system-deps-build-
      
    - name: Install system dependencies for bindgen (build optimized)
      if: steps.cache-system-deps-build.outputs.cache-hit != 'true'
      run: |
        echo "📦 Installing bindgen dependencies for build job..."
        
        # 快速安装，复用test job的优化
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          clang-14 \
          libclang-14-dev \
          llvm-14-dev
        
        # 创建缓存标记和符号链接
        mkdir -p ~/.cache/bindgen-deps-build
        echo "bindgen-deps-build-v4-$(date +%Y%m%d)" > ~/.cache/bindgen-deps-build/installed
        
        # 创建通用符号链接
        sudo ln -sf /usr/bin/clang-14 /usr/local/bin/clang
        sudo ln -sf /usr/lib/llvm-14/lib/libclang.so.1 /usr/local/lib/libclang.so
        
        echo "✅ Bindgen dependencies installed for build"
        
    - name: Setup libclang environment for build (optimized)
      run: |
        # 使用固定路径，避免动态查找开销
        echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV
        echo "CLANG_PATH=/usr/bin/clang-14" >> $GITHUB_ENV
        
        # 设置bindgen优化环境变量
        echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/lib/llvm-14/lib/clang/14.0.0/include" >> $GITHUB_ENV
        
        # 仅在新安装时验证
        if [ "${{ steps.cache-system-deps-build.outputs.cache-hit }}" != "true" ]; then
          echo "🔍 Build environment libclang verification:"
          ls -la /usr/lib/llvm-14/lib/libclang.so* 2>/dev/null || echo "⚠️ Libclang verification failed"
        fi
      
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r28b

    # 暂时禁用 NDK 缓存避免大小限制问题 - Build Job
    # - name: Cache NDK
    #   uses: actions/cache@v4
    #   with:
    #     path: ${{ steps.setup-ndk.outputs.ndk-path }}
    #     key: ${{ runner.os }}-ndk-r28b
    #     restore-keys: |
    #       ${{ runner.os }}-ndk-
        
    - name: Cache cargo dependencies (release)
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-build-release-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-cargo-deps-
          ${{ runner.os }}-cargo-deps-

    - name: Clean target directory (avoid cache size issues)
      run: |
        # Remove old target files to prevent cache bloat
        if [ -d "target" ]; then
          find target -name "*.rlib" -type f -delete 2>/dev/null || true
          find target -name "*.rmeta" -type f -delete 2>/dev/null || true
          find target -name "incremental" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "🧹 Cleaned target directory"
        fi
          
    - name: Build release version
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        LIBCLANG_PATH: /usr/lib/llvm-14/lib
        CLANG_PATH: /usr/bin/clang-14
        BINDGEN_EXTRA_CLANG_ARGS: "--target=aarch64-linux-android33 --sysroot=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android"
      run: |
        # 精简的环境验证，仅在非缓存情况下输出详细信息
        if [ "${{ steps.cache-system-deps-build.outputs.cache-hit }}" != "true" ]; then
          echo "🔍 Release build environment verification:"
          echo "NDK Path: $ANDROID_NDK_HOME"
          echo "LibClang Path: $LIBCLANG_PATH"
          echo "Clang Path: $CLANG_PATH"
          clang-14 --version | head -1
        fi
        
        cargo ndk -t arm64-v8a build --release --target aarch64-linux-android
        
        # Verify build success
        if [ ! -f "target/aarch64-linux-android/release/gpugovernor" ]; then
          echo "❌ Build failed - output binary not found"
          echo "📁 Checking target directory structure:"
          find target -name "gpugovernor" -type f 2>/dev/null || echo "No gpugovernor binary found anywhere"
          exit 1
        fi
        
        echo "✅ Release build completed successfully"
        ls -la target/aarch64-linux-android/release/gpugovernor
        
    - name: Package release module
      run: |
        # Create output directory
        mkdir -p output/.temp
        
        # Copy module files
        cp -rf module/* output/.temp/
        
        # Verify the build output exists
        if [ ! -f "target/aarch64-linux-android/release/gpugovernor" ]; then
          echo "❌ Build output not found: target/aarch64-linux-android/release/gpugovernor"
          echo "📁 Available files in target/aarch64-linux-android/release/:"
          ls -la target/aarch64-linux-android/release/ || echo "Directory not found"
          exit 1
        fi
        
        # Copy the binary and overwrite the placeholder
        cp -f target/aarch64-linux-android/release/gpugovernor output/.temp/bin/gpugovernor
        chmod +x output/.temp/bin/gpugovernor
        
        # Strip the binary
        ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip output/.temp/bin/gpugovernor
        
        # Verify the final structure
        echo "📦 Release module files prepared:"
        ls -la output/.temp/
        ls -la output/.temp/bin/
        echo "Binary size: $(stat -c%s output/.temp/bin/gpugovernor) bytes"
        
    - name: Debug artifact structure
      run: |
        echo "🔍 Verifying artifact structure before upload:"
        echo "Current directory: $(pwd)"
        echo "output/.temp exists: $(test -d output/.temp && echo 'YES' || echo 'NO')"
        if [ -d "output/.temp" ]; then
          echo "Contents of output/.temp:"
          find output/.temp -type f | head -20
          echo "Total files in output/.temp: $(find output/.temp -type f | wc -l)"
        else
          echo "❌ output/.temp directory not found!"
          echo "Available directories:"
          ls -la
        fi
        
    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: Mediatek_Mali_GPU_Governor-release-${{ github.run_number }}
        path: output/.temp
        if-no-files-found: error
        retention-days: 30

  cleanup:
    name: Cache Cleanup (Optional)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && contains(github.event.inputs.build_type, 'cleanup')
    
    steps:
    - name: Cleanup old cache entries
      run: |
        echo "🧹 Cache cleanup job - manual trigger only"
        echo "This job can be extended to clean up old cache entries if needed"
        echo "Current caches will be automatically managed by GitHub Actions"


