name: Build and Package Mediatek Mali GPU Governor

# 缓存策略说明:
# 1. Rust工具链和组件缓存 - 跨job共享
# 2. Cargo依赖缓存 - 基于Cargo.lock哈希
# 3. NDK缓存 - 避免重复下载大文件
# 4. 系统依赖缓存 - 避免重复apt安装
# 5. 工具二进制缓存 - cargo-ndk, shfmt等

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug, release, or both)'
        required: true
        default: 'both'
        type: choice
        options:
        - debug
        - release
        - both

env:
  CARGO_TERM_COLOR: always

jobs:
  format-and-check:
    name: Format and Lint Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: Cache Rust toolchain and tools
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup
          ~/.cargo/bin
        key: ${{ runner.os }}-rust-toolchain-${{ hashFiles('rust-toolchain.toml', 'Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-rust-toolchain-

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Cache shfmt binary
      uses: actions/cache@v4
      id: cache-shfmt
      with:
        path: /usr/local/bin/shfmt
        key: ${{ runner.os }}-shfmt-v3.7.0

    - name: Install shfmt
      if: steps.cache-shfmt.outputs.cache-hit != 'true'
      run: |
        # 使用更简单和可靠的方法安装 shfmt
        SHFMT_VERSION="v3.7.0"
        wget -O shfmt "https://github.com/mvdan/sh/releases/download/${SHFMT_VERSION}/shfmt_${SHFMT_VERSION}_linux_amd64"
        chmod +x shfmt
        sudo mv shfmt /usr/local/bin/
        
    - name: Format shell scripts
      run: |
        find module -type f -name "*.sh" -exec shfmt -w -s {} \;
        
    - name: Format Python code
      run: |
        python -m pip install --upgrade pip black isort
        black --check build.py
        isort --check-only build.py
        
    - name: Format Rust code
      run: cargo fmt --check
      
    - name: Run clippy
      run: cargo clippy -- -D warnings

  version-sync:
    name: Version Synchronization Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Check version consistency
      run: |
        # Check if module.prop exists
        if [ ! -f "module/module.prop" ]; then
          echo "❌ module/module.prop not found!"
          echo "Available files in module directory:"
          ls -la module/ || echo "module directory not found"
          exit 1
        fi
        
        CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "//' | sed 's/"//')
        MODULE_VERSION=$(grep '^version=' module/module.prop | sed 's/version=v//')
        
        echo "📦 Cargo.toml version: $CARGO_VERSION"
        echo "📱 module.prop version: $MODULE_VERSION"
        
        if [ "$CARGO_VERSION" != "$MODULE_VERSION" ]; then
          echo ""
          echo "⚠️  Version mismatch detected!"
          echo "   Cargo.toml: $CARGO_VERSION"
          echo "   module.prop: v$MODULE_VERSION"
          echo ""
          echo "💡 To fix this, update module/module.prop:"
          echo "   version=v$CARGO_VERSION"
          echo ""
          echo "🔧 Or run this command locally:"
          echo "   sed -i 's/version=v.*/version=v$CARGO_VERSION/' module/module.prop"
          exit 1
        else
          echo "✅ Versions are synchronized: v$CARGO_VERSION"
        fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.build_type == 'both'
    
    # 添加超时限制
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Cache Rust toolchain
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup
          ~/.cargo/bin
        key: ${{ runner.os }}-rust-toolchain-test-${{ hashFiles('rust-toolchain.toml', 'Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-rust-toolchain-
        
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r28b

    - name: Cache NDK
      uses: actions/cache@v4
      with:
        path: ${{ steps.setup-ndk.outputs.ndk-path }}
        key: ${{ runner.os }}-ndk-r28b
        restore-keys: |
          ${{ runner.os }}-ndk-

    - name: Cache system dependencies
      uses: actions/cache@v4
      id: cache-apt
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-bindgen-${{ hashFiles('.github/workflows/build.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-bindgen-
        
    - name: Install system dependencies for bindgen
      if: steps.cache-apt.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm-dev libclang-dev

    - name: Cache cargo-ndk
      uses: actions/cache@v4
      id: cache-cargo-ndk
      with:
        path: ~/.cargo/bin/cargo-ndk
        key: ${{ runner.os }}-cargo-ndk-${{ hashFiles('Cargo.toml') }}
        
    - name: Install cargo-ndk
      if: steps.cache-cargo-ndk.outputs.cache-hit != 'true'
      run: cargo install cargo-ndk
        
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-test-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-test-cargo-
          ${{ runner.os }}-cargo-
          
    - name: Run tests
      env:
        LIBCLANG_PATH: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib64
        BINDGEN_EXTRA_CLANG_ARGS: "--target=aarch64-linux-android33 --sysroot=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android"
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: cargo test --verbose

  build:
    name: Build Module
    runs-on: ubuntu-latest
    needs: [format-and-check, version-sync, test]
    strategy:
      matrix:
        build_type: [debug, release]

    # 添加超时限制，防止缓存问题导致的无限等待
    timeout-minutes: 45
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: aarch64-linux-android
        override: true

    - name: Cache Rust toolchain
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup
          ~/.cargo/bin
        key: ${{ runner.os }}-rust-toolchain-build-${{ hashFiles('rust-toolchain.toml', 'Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-rust-toolchain-

    - name: Cache cargo-ndk
      uses: actions/cache@v4
      id: cache-cargo-ndk-build
      with:
        path: ~/.cargo/bin/cargo-ndk
        key: ${{ runner.os }}-cargo-ndk-${{ hashFiles('Cargo.toml') }}
        
    - name: Install cargo-ndk
      if: steps.cache-cargo-ndk-build.outputs.cache-hit != 'true'
      run: cargo install cargo-ndk

    - name: Cache system dependencies
      uses: actions/cache@v4
      id: cache-apt-build
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-bindgen-${{ hashFiles('.github/workflows/build.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-bindgen-
      
    - name: Install system dependencies for bindgen
      if: steps.cache-apt-build.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang llvm-dev libclang-dev
      
    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r28b

    - name: Cache NDK
      uses: actions/cache@v4
      with:
        path: ${{ steps.setup-ndk.outputs.ndk-path }}
        key: ${{ runner.os }}-ndk-r28b
        restore-keys: |
          ${{ runner.os }}-ndk-
        
    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-build-${{ matrix.build_type }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-cargo-
          ${{ runner.os }}-cargo-
          
    - name: Build debug version
      if: matrix.build_type == 'debug' && (github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '')
      env:
        LIBCLANG_PATH: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib64
        BINDGEN_EXTRA_CLANG_ARGS: "--target=aarch64-linux-android33 --sysroot=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android"
        CC_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang
        CXX_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang++
        AR_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
        RANLIB_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: |
        cargo ndk -t arm64-v8a build --target aarch64-linux-android
        
    - name: Build release version
      if: matrix.build_type == 'release' && (github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '')
      env:
        LIBCLANG_PATH: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/lib64
        BINDGEN_EXTRA_CLANG_ARGS: "--target=aarch64-linux-android33 --sysroot=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android"
        CC_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang
        CXX_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang++
        AR_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
        RANLIB_aarch64_linux_android: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      run: |
        cargo ndk -t arm64-v8a build --release --target aarch64-linux-android
        
    - name: Package debug module
      if: matrix.build_type == 'debug' && (github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '')
      run: |
        # Create output directory
        mkdir -p output/.temp
        
        # Copy module files
        cp -rf module/* output/.temp/
        
        # Copy the binary and rename it
        cp -f target/aarch64-linux-android/debug/gpugovernor output/.temp/bin/gpugovernor
        
        # Create zip package
        cd output/.temp
        zip -9 -rq "../Mediatek_Mali_GPU_Governor_debug_v${{ github.run_number }}.zip" .
        cd ../..
        
        echo "Debug module packaged: output/Mediatek_Mali_GPU_Governor_debug_v${{ github.run_number }}.zip"
        
    - name: Package release module
      if: matrix.build_type == 'release' && (github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '')
      run: |
        # Create output directory
        mkdir -p output/.temp
        
        # Copy module files
        cp -rf module/* output/.temp/
        
        # Copy the binary and rename it
        cp -f target/aarch64-linux-android/release/gpugovernor output/.temp/bin/gpugovernor
        
        # Strip the binary
        ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip output/.temp/bin/gpugovernor
        
        # Create zip package
        cd output/.temp
        zip -9 -rq "../Mediatek_Mali_GPU_Governor_release_v${{ github.run_number }}.zip" .
        cd ../..
        
        echo "Release module packaged: output/Mediatek_Mali_GPU_Governor_release_v${{ github.run_number }}.zip"
        
    - name: Upload debug artifact
      if: matrix.build_type == 'debug' && (github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '')
      uses: actions/upload-artifact@v4
      with:
        name: Mediatek_Mali_GPU_Governor-debug-${{ github.run_number }}
        path: output/Mediatek_Mali_GPU_Governor_debug_v${{ github.run_number }}.zip
        
    - name: Upload release artifact
      if: matrix.build_type == 'release' && (github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '')
      uses: actions/upload-artifact@v4
      with:
        name: Mediatek_Mali_GPU_Governor-release-${{ github.run_number }}
        path: output/Mediatek_Mali_GPU_Governor_release_v${{ github.run_number }}.zip

  cleanup:
    name: Cache Cleanup (Optional)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && contains(github.event.inputs.build_type, 'cleanup')
    
    steps:
    - name: Cleanup old cache entries
      run: |
        echo "🧹 Cache cleanup job - manual trigger only"
        echo "This job can be extended to clean up old cache entries if needed"
        echo "Current caches will be automatically managed by GitHub Actions"


